@model IEnumerable<OfferDto>

@{
    ViewData["Title"] = "Incoming offers";
}

<h1>Incoming offers</h1>

@if (TempData.ContainsKey(MVC.Controllers.OfferController.SKEY_OFFER_ACCEPTED))
{
    @if ((bool)TempData[MVC.Controllers.OfferController.SKEY_OFFER_ACCEPTED])
    {
        await Html.RenderPartialAsync("_AlertPartial", new AlertViewModel { Type = AlertType.Success, Message = "Offer successfully accepted." });
    }
    else
    {
        await Html.RenderPartialAsync("_AlertPartial", new AlertViewModel { Type = AlertType.Error, Message = "The offer could not be accepted. Please make sure that both parties have the required resources." });
    }
}

@if (TempData.ContainsKey(MVC.Controllers.OfferController.SKEY_DELIVERY_APPROVED))
{
    @if ((bool)TempData[MVC.Controllers.OfferController.SKEY_DELIVERY_APPROVED])
    {
        await Html.RenderPartialAsync("_AlertPartial", new AlertViewModel { Type = AlertType.Success, Message = "Delivery confirmed." });
    }
    else
    {
        await Html.RenderPartialAsync("_AlertPartial", new AlertViewModel { Type = AlertType.Error, Message = "The delivery could not be confirmed." });
    }
}

@if (TempData.ContainsKey(MVC.Controllers.OfferController.SKEY_OFFER_DECLINED))
{
    @if ((bool)TempData[MVC.Controllers.OfferController.SKEY_OFFER_DECLINED])
    {
        await Html.RenderPartialAsync("_AlertPartial", new AlertViewModel { Type = AlertType.Success, Message = "Offer successfully declined." });
    }
}

<table class="table table-bordered">
    <thead style="text-align: center; vertical-align: middle">
        <tr>
            <th scope="col" rowspan="2">Author</th>
            <th scope="col" rowspan="2">Created</th>
            <th scope="col" colspan="2" style="text-align: center">Offered</th>
            <th scope="col" colspan="2" style="text-align: center">Requested</th>
            <th scope="col" rowspan="2">State</th>
            <th scope="col" rowspan="2">Actions</th>
        </tr>
        <tr style="font-size: 0.8rem">
            <th scope="col" style="font-weight: 300">Money</th>
            <th scope="col" style="font-weight: 300">Cactuses</th>
            <th scope="col" style="font-weight: 300">Money</th>
            <th scope="col" style="font-weight: 300">Cactuses</th>
        </tr>
    </thead>
    <tbody style="vertical-align: middle">
        @foreach (var offer in Model)
        {
            <tr>
                <td>@offer.Author.FirstName @offer.Author.LastName</td>
                <td>@offer.CreationDate</td>
                <td class="text-end">@offer.OfferedMoney</td>
                <td>
                    @for (int i = 0; i < offer.OfferedCactuses.Count(); i++)
                    {
                        <span>@offer.OfferedCactuses.ToList()[i].Cactus.Species.Name: <em>@offer.OfferedCactuses.ToList()[i].Amount pcs</em></span><br />
                    }
                </td>
                <td class="text-end">@offer.RequestedMoney</td>
                <td>
                    @for (int i = 0; i < offer.RequestedCactuses.Count(); i++)
                    {
                        <span>@offer.RequestedCactuses.ToList()[i].Cactus.Species.Name: <em>@offer.RequestedCactuses.ToList()[i].Amount pcs</em></span><br />
                    }
                </td>
                <td>@offer.Response</td>
                <td>
                    @if (offer.Response == BL.Enums.OfferStatus.Created)
                    {
                        <form asp-action="Accept">
                            <input type="hidden" name="id" value="@offer.Id" />
                            <button type="submit" class="btn btn-outline-success">Accept</button>
                        </form>
                        <form asp-action="Counter">
                            <input type="hidden" name="id" value="@offer.Id" />
                            <button type="submit" class="btn btn-outline-primary">Counter Offer</button>
                        </form>
                        <form asp-action="Decline">
                            <input type="hidden" name="id" value="@offer.Id" />
                            <button type="submit" class="btn btn-outline-danger">Decline</button>
                        </form>
                    }
                    else if (offer.Response == BL.Enums.OfferStatus.Accepted)
                    {
                        if (offer.Transfer.RecipientAprovedDelivery)
                        {
                            <span>Waiting for the author to confirm the delivery.</span>
                        }
                        else
                        {
                            <form asp-action="Confirm">
                                <input type="hidden" name="id" value="@offer.Id" />
                                <input type="hidden" name="redirect" value="Incoming" />
                                <button type="submit" class="btn btn-outline-primary">Confirm delivery</button>
                            </form>
                        }
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
